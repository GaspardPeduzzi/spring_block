{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EditableText = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar EditableText = exports.EditableText = function (_React$Component) {\n  _inherits(EditableText, _React$Component);\n\n  function EditableText(props) {\n    _classCallCheck(this, EditableText);\n\n    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(EditableText).call(this, props));\n\n    _this.state = {\n      dirtyValue: _this.props.value,\n      isBeingEdited: _this.props.isOpen\n    };\n    return _this;\n  }\n\n  _createClass(EditableText, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.value !== this.props.value) {\n        this.setState({\n          dirtyValue: nextProps.value,\n          isBeingEdited: nextProps.isOpen\n        });\n      }\n    }\n  }, {\n    key: 'onSetEditing',\n    value: function onSetEditing(isBeingEdited) {\n      var _this2 = this;\n\n      if (this.props.disabled) {\n        return false;\n      }\n\n      return this.setState({\n        isBeingEdited: isBeingEdited\n      }, function () {\n        if (_this2.state.isBeingEdited) {\n          _this2.refs['edit-input'].focus();\n        }\n      });\n    }\n  }, {\n    key: 'onCancelEditing',\n    value: function onCancelEditing() {\n      this.setState({\n        isBeingEdited: false,\n        dirtyValue: this.props.value\n      });\n    }\n  }, {\n    key: 'onSubmit',\n    value: function onSubmit() {\n      var validationResult = this.getValidationResult();\n\n      if (validationResult === 'error') {\n        return false;\n      }\n\n      return this.props.onChange(this.state.dirtyValue);\n    }\n  }, {\n    key: 'onTextChange',\n    value: function onTextChange(e) {\n      return this.setState({\n        dirtyValue: e.currentTarget.value\n      });\n    }\n  }, {\n    key: 'onHandleKeyDown',\n    value: function onHandleKeyDown(e) {\n      if (e.keyCode === 27) {\n        // esc\n        return this.onCancelEditing();\n      } else if (e.keyCode === 13) {\n        // enter\n        return this.onSubmit();\n      }\n\n      return e;\n    }\n  }, {\n    key: 'getValidationResult',\n    value: function getValidationResult() {\n      if (!this.props.onValidate) {\n        return '';\n      }\n\n      var validationResult = this.props.onValidate(this.state.dirtyValue);\n\n      if (validationResult === true || validationResult === 'success') {\n        return 'success';\n      } else if (validationResult === false || validationResult === 'error') {\n        return 'error';\n      } else if (validationResult === 'warning') {\n        return 'warning';\n      }\n\n      return '';\n    }\n  }, {\n    key: 'getStatus',\n    value: function getStatus(status) {\n      return status ? 'has-' + status : '';\n    }\n  }, {\n    key: 'renderErrorHelpLabel',\n    value: function renderErrorHelpLabel(status) {\n      if (!this.props.errorHelpLabel || status !== 'error') {\n        return null;\n      }\n\n      return _react2.default.createElement('div', {\n        className: 'editable-error help-block'\n      }, this.props.errorHelpLabel);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      var status = this.getValidationResult(); // '', warning, success, error\n\n      if (!this.state.isBeingEdited) {\n        return _react2.default.createElement('span', {\n          className: 'editable editable-click ' + (this.props.disabled ? 'disabled' : ''),\n          onClick: function onClick(e) {\n            return _this3.onSetEditing(true);\n          }\n        }, this.props.value || this.props.placeholder);\n      }\n\n      return _react2.default.createElement('form', {\n        className: 'form-inline editable-wrap editable-text',\n        role: 'form',\n        onSubmit: function onSubmit(e) {\n          return e.preventDefault();\n        }\n      }, _react2.default.createElement('div', {\n        className: 'editable-controls form-group ' + this.getStatus(status)\n      }, _react2.default.createElement('input', {\n        type: 'text',\n        value: this.state.dirtyValue,\n        onChange: function onChange(e) {\n          return _this3.onTextChange(e);\n        },\n        onKeyDown: function onKeyDown(e) {\n          return _this3.onHandleKeyDown(e);\n        },\n        ref: 'edit-input',\n        className: 'editable-has-buttons editable-input form-control'\n      }), _react2.default.createElement('span', {\n        className: 'editable-buttons button-wrapper'\n      }, _react2.default.createElement('button', {\n        type: 'button',\n        onClick: function onClick(e) {\n          return _this3.onSubmit(status);\n        },\n        className: 'btn btn-primary btn-with-icon'\n      }, _react2.default.createElement('i', {\n        className: 'fa fa-check'\n      })), _react2.default.createElement('button', {\n        type: 'button',\n        onClick: function onClick(e) {\n          return _this3.onCancelEditing();\n        },\n        className: 'btn btn-default btn-with-icon'\n      }, _react2.default.createElement('i', {\n        className: 'fa fa-close'\n      }))), this.renderErrorHelpLabel(status)));\n    }\n  }]);\n\n  return EditableText;\n}(_react2.default.Component);\n\nEditableText.propTypes = {\n  onChange: _react2.default.PropTypes.func.isRequired,\n  isOpen: _react2.default.PropTypes.bool,\n  onValidate: _react2.default.PropTypes.func,\n  value: _react2.default.PropTypes.node,\n  hasError: _react2.default.PropTypes.bool,\n  errorHelpLabel: _react2.default.PropTypes.string,\n  placeholder: _react2.default.PropTypes.string,\n  disabled: _react2.default.PropTypes.bool\n};\nEditableText.defaultProps = {\n  value: '',\n  isOpen: false,\n  hasError: false,\n  errorHelpLabel: '',\n  placeholder: 'No Value',\n  disabled: false\n};","map":null,"metadata":{},"sourceType":"script"}
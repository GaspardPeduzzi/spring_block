{"ast":null,"code":"var _jsxFileName = \"/Users/hugo/springblock/src/views/network.js\";\nimport React, { Component } from \"react\";\nimport { Page, Panel, Table, TableHead, TableBody, TableRow } from 'react-blur-admin';\nimport { Row } from \"react-flex-proto\";\nimport { xrpLedger } from \"./api_requests\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport { getName } from \"country-list\";\nexport class Network extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      offers: [],\n      currencies: [],\n      node_count: [],\n      issuers: {\n        rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B: \"Bitstamp\",\n        rKiCet8SdvWxPXnAgYarFUXMh1zCPz432Y: \"ripplefox\",\n        rhub8VRN55s94qWKDv6jmDy1pUykJzF3wq: \"gatehub\",\n        rchGBxcD1A1C2tdxF6papQYZ8kjRKMYcL: \"GateHub Fifth BTC (Cold)\",\n        razqQKzJRdB4UxFPWf5NEpEG3WMkmwgcXA: \"RippleChina\",\n        rcA8X3TVMST1n3CJeAdGk1RdRCHii7N2h: \"GateHub Fifth\"\n      },\n      num_nodes: \"x\"\n    };\n  }\n\n  async componentDidMount() {\n    let offersInterval = setInterval(async () => {\n      let offers = await xrpLedger.getOffers(9);\n      this.setState({\n        offers: offers.data.transactions\n      });\n      console.log(this.state.offers);\n    }, 3000);\n    let currencies = await xrpLedger.getTopCurrencies(); // Get topology data\n\n    let nodes = await xrpLedger.getTopology();\n    nodes = nodes.data.nodes;\n    let node_count = {};\n    nodes.forEach(node => {\n      if (node.country_code in node_count) {\n        node_count[node.country_code] += 1;\n      } else {\n        node_count[node.country_code] = 1;\n      }\n    });\n    let num_nodes = nodes.length;\n    this.setState({\n      offersInterval,\n      currencies: currencies.data.currencies,\n      node_count,\n      num_nodes\n    });\n    /* Chart code */\n    // Themes begin\n\n    am4core.useTheme(am4themes_animated); // Themes end\n\n    let chart = am4core.create(\"chartdiv\", am4maps.MapChart); // Set map definition\n\n    chart.geodata = am4geodata_worldLow; // Set projection\n\n    chart.projection = new am4maps.projections.Orthographic();\n    chart.panBehavior = \"rotateLongLat\";\n    chart.deltaLatitude = -20;\n    chart.padding(20, 20, 20, 20); // Create map polygon series\n\n    let polygonSeries = chart.series.push(new am4maps.MapPolygonSeries()); // Make map load polygon (like country names) data from GeoJSON\n\n    polygonSeries.useGeodata = true; // Configure series\n\n    let polygonTemplate = polygonSeries.mapPolygons.template;\n    polygonTemplate.tooltipText = \"{name}\";\n    polygonTemplate.fill = am4core.color(\"#ffffff\");\n    polygonTemplate.stroke = am4core.color(\"#454a58\");\n    polygonTemplate.strokeWidth = 0.5;\n    let graticuleSeries = chart.series.push(new am4maps.GraticuleSeries());\n    graticuleSeries.mapLines.template.line.stroke = am4core.color(\"#ffffff\");\n    graticuleSeries.mapLines.template.line.strokeOpacity = 0.08;\n    graticuleSeries.fitExtent = false;\n    chart.backgroundSeries.mapPolygons.template.polygon.fillOpacity = 0.1;\n    chart.backgroundSeries.mapPolygons.template.polygon.fill = am4core.color(\"#ffffff\"); // Create hover state and set alternative fill color\n\n    let hs = polygonTemplate.states.create(\"hover\");\n    hs.properties.fill = chart.colors.getIndex(0).brighten(-0.5);\n    let animation;\n    setTimeout(function () {\n      animation = chart.animate({\n        property: \"deltaLongitude\",\n        to: 100000\n      }, 20000000);\n    }, 3000);\n    chart.seriesContainer.events.on(\"down\", function () {\n      if (animation) {\n        animation.stop();\n      }\n    });\n    let topography_data = [];\n\n    for (const node in this.state.node_count) {\n      if (node !== undefined) {\n        topography_data.push({\n          \"id\": node,\n          \"name\": getName(node),\n          \"value\": this.state.node_count[node],\n          \"fill\": am4core.color(\"#209e91\")\n        });\n      }\n    }\n\n    polygonSeries.data = topography_data;\n    polygonTemplate.tooltipText = \"{name}: {value}\";\n    polygonTemplate.propertyFields.fill = \"fill\";\n    this.chart = chart;\n  }\n\n  componentWillUnmount() {\n    if (this.chart) {\n      this.chart.dispose();\n    }\n\n    clearInterval(this.state.offersInterval);\n  } // async t1OnSetCurrentPage(value) {\n  //     let offers = await xrpLedger.getOffers(100, \"\")\n  //     this.setState({t1CurrentPage: value, marker : offers.data.marker, offers : offers.data.transactions});\n  // }\n\n\n  convertDate(date) {\n    date = new Date(date);\n    let time = date.getHours() + \" : \" + date.getMinutes();\n    let year = date.getFullYear();\n    let month = date.getMonth() + 1;\n    let dt = date.getDate();\n\n    if (dt < 10) {\n      dt = '0' + dt;\n    }\n\n    if (month < 10) {\n      month = '0' + month;\n    }\n\n    return \"\".concat(year, \"-\").concat(month, \"-\").concat(+dt, \" (\").concat(time, \")\");\n  }\n\n  abbreviateHash(hash) {\n    return hash.substr(0, 10) + \"...\" + hash.substr(-10);\n  }\n\n  getTableRows(offer) {\n    let baseCur = offer.tx.TakerPays.currency || \"XRP\";\n    let topCur = offer.tx.TakerGets.currency || \"XRP\";\n    let baseVal = offer.tx.TakerGets.value || offer.tx.TakerGets / 1E6;\n    let topVal = offer.tx.TakerPays.value || offer.tx.TakerPays / 1E6;\n    let rate = (topVal / baseVal).toFixed(4);\n    return React.createElement(TableRow, {\n      key: offer.hash,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, topCur, \"/\", baseCur, \" \"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, rate), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, parseFloat(topVal).toFixed(2), \" \", topCur), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, parseFloat(baseVal).toFixed(2), \" \", baseCur), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      target: \"_blank\",\n      href: \"https://xrpscan.com/tx/\".concat(offer.hash),\n      style: {\n        color: \"#00d1b2\"\n      },\n      rel: \"noopener noreferrer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(\"abbr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, this.abbreviateHash(offer.hash)))), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, offer.meta.AffectedNodes.length), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, this.convertDate(offer.date)));\n  }\n\n  render() {\n    return React.createElement(Page, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      style: {\n        margin: \"0.1em\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-md-6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(Panel, {\n      title: \"Top Currencies (Past 24 hours)\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(Table, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(TableHead, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, \"Rank\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"Currency\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, \"Issued Value\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, \"Volume\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, \"Issuer\")), React.createElement(TableBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, this.state.currencies.map((currency, i) => {\n      return React.createElement(TableRow, {\n        key: currency.avg_payment_volume,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, i + 1), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, currency.currency), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, parseFloat(currency.issued_value.substr(0, 10)).toFixed(2), \" XRP\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, parseFloat(currency.avg_exchange_volume).toFixed(2)), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, this.state.issuers[currency.issuer] || this.abbreviateHash(currency.issuer)));\n    }))))), React.createElement(\"div\", {\n      className: \"col-md-6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(Panel, {\n      title: \"Node Locality (\".concat(this.state.num_nodes, \" total)\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"chartdiv\",\n      style: {\n        width: \"100%\",\n        height: \"388px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      className: \"row\",\n      style: {\n        margin: \"1em\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(Panel, {\n      title: \"Latest Offers Created\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(Table, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, React.createElement(TableHead, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, \"Exchange Pair\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, \"Exchange Rate\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, \"Buy\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, \"Sell\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, \"Hash\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, \"Affected Nodes\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, \"Timestamp\")), React.createElement(TableBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, this.state.offers.map(offer => {\n      return this.getTableRows(offer);\n    }))), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }))));\n  }\n\n}","map":{"version":3,"sources":["/Users/hugo/springblock/src/views/network.js"],"names":["React","Component","Page","Panel","Table","TableHead","TableBody","TableRow","Row","xrpLedger","am4core","am4maps","am4geodata_worldLow","am4themes_animated","getName","Network","constructor","props","state","offers","currencies","node_count","issuers","rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B","rKiCet8SdvWxPXnAgYarFUXMh1zCPz432Y","rhub8VRN55s94qWKDv6jmDy1pUykJzF3wq","rchGBxcD1A1C2tdxF6papQYZ8kjRKMYcL","razqQKzJRdB4UxFPWf5NEpEG3WMkmwgcXA","rcA8X3TVMST1n3CJeAdGk1RdRCHii7N2h","num_nodes","componentDidMount","offersInterval","setInterval","getOffers","setState","data","transactions","console","log","getTopCurrencies","nodes","getTopology","forEach","node","country_code","length","useTheme","chart","create","MapChart","geodata","projection","projections","Orthographic","panBehavior","deltaLatitude","padding","polygonSeries","series","push","MapPolygonSeries","useGeodata","polygonTemplate","mapPolygons","template","tooltipText","fill","color","stroke","strokeWidth","graticuleSeries","GraticuleSeries","mapLines","line","strokeOpacity","fitExtent","backgroundSeries","polygon","fillOpacity","hs","states","properties","colors","getIndex","brighten","animation","setTimeout","animate","property","to","seriesContainer","events","on","stop","topography_data","undefined","propertyFields","componentWillUnmount","dispose","clearInterval","convertDate","date","Date","time","getHours","getMinutes","year","getFullYear","month","getMonth","dt","getDate","abbreviateHash","hash","substr","getTableRows","offer","baseCur","tx","TakerPays","currency","topCur","TakerGets","baseVal","value","topVal","rate","toFixed","parseFloat","meta","AffectedNodes","render","margin","map","i","avg_payment_volume","issued_value","avg_exchange_volume","issuer","width","height"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\nimport { Page, Panel, Table, TableHead, TableBody, TableRow, } from 'react-blur-admin';\nimport {Row} from \"react-flex-proto\";\nimport { xrpLedger } from \"./api_requests\"\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport {getName} from \"country-list\"\n\nexport class Network extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            offers: [],\n            currencies: [],\n            node_count: [],\n            issuers: {\n                rvYAfWj5gh67oV6fW32ZzP3Aw4Eubs59B : \"Bitstamp\",\n                rKiCet8SdvWxPXnAgYarFUXMh1zCPz432Y : \"ripplefox\",\n                rhub8VRN55s94qWKDv6jmDy1pUykJzF3wq : \"gatehub\",\n                rchGBxcD1A1C2tdxF6papQYZ8kjRKMYcL : \"GateHub Fifth BTC (Cold)\",\n                razqQKzJRdB4UxFPWf5NEpEG3WMkmwgcXA : \"RippleChina\",\n                rcA8X3TVMST1n3CJeAdGk1RdRCHii7N2h : \"GateHub Fifth\"\n            },\n            num_nodes: \"x\",\n        };\n    }\n\n    async componentDidMount() {\n\n        let offersInterval = setInterval(async () => {\n            let offers = await xrpLedger.getOffers(9);\n            this.setState({ offers : offers.data.transactions });\n            console.log(this.state.offers)\n        }, 3000);\n        let currencies = await xrpLedger.getTopCurrencies();\n\n        // Get topology data\n        let nodes = await xrpLedger.getTopology();\n        nodes = nodes.data.nodes;\n        let node_count = {};\n\n        nodes.forEach((node) => {\n            if (node.country_code in node_count) {\n                node_count[node.country_code] += 1\n            } else {\n                node_count[node.country_code] = 1\n            }\n        })\n        let num_nodes = nodes.length;\n        this.setState({offersInterval, currencies : currencies.data.currencies, node_count, num_nodes});\n\n        /* Chart code */\n        // Themes begin\n        am4core.useTheme(am4themes_animated);\n        // Themes end\n\n        let chart = am4core.create(\"chartdiv\", am4maps.MapChart);\n\n        // Set map definition\n        chart.geodata = am4geodata_worldLow;\n\n        // Set projection\n        chart.projection = new am4maps.projections.Orthographic();\n        chart.panBehavior = \"rotateLongLat\";\n        chart.deltaLatitude = -20;\n        chart.padding(20,20,20,20);\n\n        // Create map polygon series\n        let polygonSeries = chart.series.push(new am4maps.MapPolygonSeries());\n\n        // Make map load polygon (like country names) data from GeoJSON\n        polygonSeries.useGeodata = true;\n\n        // Configure series\n        let polygonTemplate = polygonSeries.mapPolygons.template;\n        polygonTemplate.tooltipText = \"{name}\";\n        polygonTemplate.fill = am4core.color(\"#ffffff\");\n        polygonTemplate.stroke = am4core.color(\"#454a58\");\n        polygonTemplate.strokeWidth = 0.5;\n\n        let graticuleSeries = chart.series.push(new am4maps.GraticuleSeries());\n        graticuleSeries.mapLines.template.line.stroke = am4core.color(\"#ffffff\");\n        graticuleSeries.mapLines.template.line.strokeOpacity = 0.08;\n        graticuleSeries.fitExtent = false;\n\n\n        chart.backgroundSeries.mapPolygons.template.polygon.fillOpacity = 0.1;\n        chart.backgroundSeries.mapPolygons.template.polygon.fill = am4core.color(\"#ffffff\");\n\n        // Create hover state and set alternative fill color\n        let hs = polygonTemplate.states.create(\"hover\");\n        hs.properties.fill = chart.colors.getIndex(0).brighten(-0.5);\n\n        let animation;\n        setTimeout(function(){\n            animation = chart.animate({property:\"deltaLongitude\", to:100000}, 20000000);\n        }, 3000);\n\n        chart.seriesContainer.events.on(\"down\", function(){\n            if(animation){\n                animation.stop();\n            }\n        });\n\n        let topography_data = [];\n\n        for (const node in this.state.node_count) {\n            if (node !== undefined) {\n                topography_data.push({\n                    \"id\" : node,\n                    \"name\" : getName(node),\n                    \"value\" : this.state.node_count[node],\n                    \"fill\": am4core.color(\"#209e91\")\n                })\n            }\n        }\n\n        polygonSeries.data = topography_data;\n        polygonTemplate.tooltipText = \"{name}: {value}\";\n        polygonTemplate.propertyFields.fill = \"fill\";\n\n        this.chart = chart\n\n    }\n\n    componentWillUnmount() {\n        if (this.chart) {\n            this.chart.dispose();\n        }\n\n        clearInterval(this.state.offersInterval);\n    }\n\n    // async t1OnSetCurrentPage(value) {\n    //     let offers = await xrpLedger.getOffers(100, \"\")\n    //     this.setState({t1CurrentPage: value, marker : offers.data.marker, offers : offers.data.transactions});\n    // }\n\n    convertDate(date) {\n        date = new Date(date);\n        let time = date.getHours() + \" : \" + date.getMinutes();\n        let year = date.getFullYear();\n        let month = date.getMonth()+1;\n        let dt = date.getDate();\n\n        if (dt < 10) {\n            dt = '0' + dt;\n        }\n        if (month < 10) {\n            month = '0' + month;\n        }\n        return `${year}-${month}-${+dt} (${time})`\n    }\n\n    abbreviateHash(hash) {\n        return hash.substr(0,10) + \"...\" + hash.substr(-10)\n    }\n\n    getTableRows(offer) {\n        let baseCur = offer.tx.TakerPays.currency || \"XRP\";\n        let topCur = offer.tx.TakerGets.currency || \"XRP\";\n        let baseVal = offer.tx.TakerGets.value || offer.tx.TakerGets / 1E6;\n        let topVal = offer.tx.TakerPays.value || offer.tx.TakerPays / 1E6;\n        let rate = ( topVal / baseVal).toFixed(4);\n\n        return (\n            <TableRow key={offer.hash}>\n                    <td>{topCur}/{baseCur} </td>\n                    <td>{rate}</td>\n                    <td>{parseFloat(topVal).toFixed(2)} {topCur}</td>\n                    <td>{parseFloat(baseVal).toFixed(2)} {baseCur}</td>\n                    <td><a target=\"_blank\" href={`https://xrpscan.com/tx/${offer.hash}`} style={{color: \"#00d1b2\"}} rel=\"noopener noreferrer\"><abbr>{this.abbreviateHash(offer.hash)}</abbr></a></td>\n                    <td>{offer.meta.AffectedNodes.length}</td>\n                    <td>{this.convertDate(offer.date)}</td>\n            </TableRow>\n        )\n    }\n\n    render() {\n        return (\n            <Page>\n                <div className=\"row\" style={{margin:\"0.1em\"}}>\n                    <div className=\"col-md-6\">\n                    <Panel title=\"Top Currencies (Past 24 hours)\">\n                        <Table>\n                            <TableHead>\n                                <th>Rank</th>\n                                <th>Currency</th>\n                                <th>Issued Value</th>\n                                <th>Volume</th>\n                                <th>Issuer</th>\n                            </TableHead>\n                            <TableBody>\n                                {this.state.currencies.map((currency, i) => {\n                                    return (\n                                        <TableRow key={currency.avg_payment_volume}>\n                                            <td>{i + 1}</td>\n                                            <td>{currency.currency}</td>\n                                            <td>{parseFloat(currency.issued_value.substr(0,10)).toFixed(2)} XRP</td>\n                                            <td>{parseFloat(currency.avg_exchange_volume).toFixed(2)}</td>\n                                            <td>{this.state.issuers[currency.issuer] || this.abbreviateHash(currency.issuer)}</td>\n                                        </TableRow>\n                                    )\n                                })}\n                            </TableBody>\n                        </Table>\n                    </Panel>\n                    </div>\n                    <div className=\"col-md-6\">\n                        <Panel title={`Node Locality (${this.state.num_nodes} total)`}>\n                            <div id=\"chartdiv\" style={{ width: \"100%\", height: \"388px\" }}></div>\n                        </Panel>\n                    </div>\n                </div>\n                <div className=\"row\" style={{margin:\"1em\"}}>\n                    <Panel title='Latest Offers Created'>\n                        <Table>\n                            <TableHead>\n                                <th>Exchange Pair</th>\n                                <th>Exchange Rate</th>\n                                <th>Buy</th>\n                                <th>Sell</th>\n                                <th>Hash</th>\n                                <th>Affected Nodes</th>\n                                <th>Timestamp</th>\n                            </TableHead>\n                            <TableBody>\n                                {this.state.offers.map((offer) => {\n                                    return this.getTableRows(offer)\n                                })}\n                            </TableBody>\n                        </Table>\n                        <Row>\n                        </Row>\n                    </Panel>\n                </div>\n            </Page>\n\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
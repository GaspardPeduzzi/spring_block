{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EditableSelect = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _select = require('./select');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar EditableSelect = exports.EditableSelect = function (_React$Component) {\n  _inherits(EditableSelect, _React$Component);\n\n  function EditableSelect(props) {\n    _classCallCheck(this, EditableSelect);\n\n    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(EditableSelect).call(this, props));\n\n    _this.state = {\n      isBeingEdited: _this.props.isBeingEdited || false\n    };\n    return _this;\n  }\n\n  _createClass(EditableSelect, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.value !== this.props.value && !nextProps.hasOwnProperty('isBeingEdited')) {\n        this.setState({\n          isBeingEdited: false\n        });\n      } else if (nextProps.isBeingEdited !== this.props.isBeingEdited) {\n        this.setState({\n          isBeingEdited: nextProps.isBeingEdited\n        });\n      }\n    }\n  }, {\n    key: 'onSetEditing',\n    value: function onSetEditing(isBeingEdited) {\n      if (this.props.disabled) {\n        return false;\n      }\n\n      return this.setState({\n        isBeingEdited: isBeingEdited\n      });\n    }\n  }, {\n    key: 'onChange',\n    value: function onChange(value) {\n      this.setState({\n        isBeingEdited: false\n      });\n      this.props.onChange(value);\n    }\n  }, {\n    key: 'renderValue',\n    value: function renderValue(option) {\n      if (this.props.value && this.props.onRenderValue) {\n        // User can format the value how they want it\n        return this.props.onRenderValue(this.props.value);\n      } else if (option && option.label) {\n        // Otherwise display the label\n        return option.label;\n      }\n\n      return this.props.placeholder;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      if (!this.state.isBeingEdited) {\n        var option = _lodash2.default.find(this.props.options, {\n          value: this.props.value\n        });\n\n        return _react2.default.createElement('span', {\n          className: 'editable editable-click ' + (this.props.disabled ? 'disabled' : ''),\n          onClick: function onClick(e) {\n            return _this2.onSetEditing(true);\n          }\n        }, this.renderValue(option));\n      }\n\n      return _react2.default.createElement('form', {\n        className: 'form-inline editable-wrap editable-text',\n        role: 'form',\n        onSubmit: function onSubmit(e) {\n          return e.preventDefault();\n        }\n      }, _react2.default.createElement('div', {\n        className: 'editable-controls form-group'\n      }, _react2.default.createElement(_select.Select, _extends({\n        isOpen: true\n      }, this.props, {\n        onChange: function onChange(value) {\n          return _this2.onChange(value);\n        },\n        onToggleOpen: function onToggleOpen(isOpen) {\n          return _this2.onSetEditing(isOpen);\n        },\n        className: 'editable-has-buttons editable-input'\n      }))));\n    }\n  }]);\n\n  return EditableSelect;\n}(_react2.default.Component);\n\nEditableSelect.propTypes = {\n  onChange: _react2.default.PropTypes.func.isRequired,\n  value: _react2.default.PropTypes.node,\n  placeholder: _react2.default.PropTypes.string,\n  maxHeight: _react2.default.PropTypes.string,\n  options: _react2.default.PropTypes.arrayOf(_react2.default.PropTypes.shape({\n    value: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.number, _react2.default.PropTypes.string]),\n    label: _react2.default.PropTypes.node\n  })),\n  onSearch: _react2.default.PropTypes.func,\n  // if label is a ReactElement, we recommend you pass in an onSearch function\n  onRenderValue: _react2.default.PropTypes.func,\n  // if label is a ReactElement, we recommend you pass in an onRenderValue function\n  isSearchable: _react2.default.PropTypes.bool,\n  disabled: _react2.default.PropTypes.bool,\n  isBeingEdited: _react2.default.PropTypes.bool\n};\nEditableSelect.defaultProps = {\n  value: '',\n  placeholder: 'No Value'\n};","map":null,"metadata":{},"sourceType":"script"}